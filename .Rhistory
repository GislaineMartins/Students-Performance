tabela$GPA <- as.numeric(tabela$GPA)
View(tabela)
rm(g)
rm(p)
rm(original_values)
rm(original_values_gpa)
rm(tabela)
tabela = read.table("Student_performance_data.csv", sep = ";", dec = ",", header = TRUE)
summary(tabela)
str(tabela)
na_columns <- colSums(is.na(tabela)) > 0
na_columns_names <- names(df)[na_columns]
na_columns_names
ggplot(tabela, aes(x = variavel1, y = variavel2, color = variavel_categorica)) +
geom_point() +
labs(title = "Scatter plot", x = "Variável 1", y = "Variável 2")
View(tabela)
View(tabela)
ggplot(tabela, aes(StudyTimeWeekly)) + geom_histogram()
ggplot(tabela, aes(StudyTimeWeekly)) +
geom_histogram()
ggplot(tabela, aes(StudyTimeWeekly)) +
geom_bar()
str(tabela)
unique(tabela$StudyTimeWeekly)
tabela$StudyTimeWeekly <- gsub("[^0-9.]", "", tabela$StudyTimeWeekly)
View(tabela)
tabela$StudyTimeWeekly <- as.numeric(tabela$StudyTimeWeekly)
print(data)
print(tabela)
View(tabela)
rm(na_columns)
rm(na_columns_names)
View(tabela)
tabela = read.table("Student_performance_data.csv", sep = ";", dec = ",", header = TRUE)
View(tabela)
unique(tabela$StudyTimeWeekly)
taabela$StudyTimeWeekly <- gsub("\\.", "", tabela$StudyTimeWeekly)
tabela$StudyTimeWeekly <- gsub("\\.", "", tabela$StudyTimeWeekly)
summary(tabela$StudyTimeWeekly)
tabela$StudyTimeWeekly <- as.numeric(tabela$StudyTimeWeekly)
summary(tabela$StudyTimeWeekly)
boxplot(tabela$StudyTimeWeekly, main = "Boxplot de StudyTimeWeekly", ylab = "StudyTimeWeekly")
quantile(tabela$StudyTimeWeekly, c(0.25, 0.5, 0.75, 0.9, 0.95))
tabela$StudyTimeWeekly_log_scaled <- log(tabela$StudyTimeWeekly)
boxplot(tabela$StudyTimeWeekly_log_scaled, main = "Boxplot de StudyTimeWeekly", ylab = "StudyTimeWeekly")
View(tabela)
summary(dados$StudyTimeWeekly)
summary(tabela$StudyTimeWeekly)  # Resumo estatístico dos dados
View(tabela)
boxplot(tabela$StudyTimeWeekly_log_scaled, main = "Boxplot de StudyTimeWeekly", ylab = "StudyTimeWeekly")
boxplot(tabela$StudyTimeWeekly_log_scaled, main = "Boxplot de StudyTimeWeekly", ylab = "StudyTimeWeekly")
unique(tabela$GPA)
tabela$GPA <- gsub("\\.", "", tabela$GPA) # Remove os pontos
View(tabela)
tabela$GPA <- as.numeric(tabela$GPA) # Converte para numérico
View(tabela)
summary(tabela$GPA)  # Resumo estatístico dos dados
tabela$GPA_log_scaled <- log(tabela$GPA)
boxplot(tabela$tabela$GPA_log_scaled, main = "Boxplot de GPA", ylab = "GPA")
tabela$GPA_log_scaled <- log(tabela$GPA)
View(tabela)
boxplot(tabela$GPA_log_scaled, main = "Boxplot de GPA", ylab = "GPA")
ggplot(tabela, aes(y = GPA_log_scaled)) +
geom_boxplot() +
labs(title = "Boxplot de GPA", y = "GPA") +
theme(plot.title = element_text(size = 20),  # Tamanho do título
axis.title.y = element_text(size = 15))  # Tamanho do rótulo do eixo y
ggplot(tabela, aes(y = StudyTimeWeekly_log_scaled)) +
geom_boxplot() +
labs(title = "Boxplot de StudyTimeWeekly", y = "StudyTimeWeekly") +
theme(plot.title = element_text(size = 20),  # Tamanho do título
axis.title.y = element_text(size = 15))  # Tamanho do rótulo do eixo y
ggplot(tabela, aes(y = GPA_log_scaled)) +
geom_boxplot() +
labs(title = "Boxplot de GPA", y = "GPA") +
theme(plot.title = element_text(size = 20),  # Tamanho do título
axis.title.y = element_text(size = 15))  # Tamanho do rótulo do eixo y
ggplot(tabela, aes(y = GPA_log_scaled)) +
geom_boxplot() +
labs(title = "Boxplot de GPA", y = "GPA") +
theme(plot.title = element_text(size = 20),  # Tamanho do título
axis.title.y = element_text(size = 15))  # Tamanho do rótulo do eixo y
+ options(repr.plot.width = 8, repr.plot.height = 6)
options(repr.plot.width = 8, repr.plot.height = 6)
ggplot(tabela, aes(y = GPA_log_scaled)) +
geom_boxplot() +
labs(title = "Boxplot de GPA", y = "GPA") +
theme(plot.title = element_text(size = 20),  # Tamanho do título
axis.title.y = element_text(size = 15))  # Tamanho do rótulo do eixo y
+ options(repr.plot.width = 8, repr.plot.height = 6)
summary(GPA_log_scaled)
summary(tabela$GPA_log_scaled)
View(tabela)
summary(tabela$GPA_log_scaled)
indices_inf <- which(is.infinite(tabela$GPA_log_scaled))
tabela$GPA_log_scaled[indices_inf]
View(tabela)
# Função para filtrar valores -Inf
filtrar_inf <- function(tabela, GPA_log_scaled) {
# Verificar se a coluna existe no data frame
if (!GPA_log_scaled %in% GPA_log_scaled(tabela)) {
stop(paste("Coluna", GPA_log_scaled, "não encontrada no data frame."))
}
# Retornar o data frame filtrado
return(df_filtrado)
}
print(filtrar_inf)
print(df_filtrado)
View(filtrar_inf)
rm(filtrar_inf())
rm(filtrar_inf)
# Função para filtrar valores -Inf
filtrar_inf <- function(df, coluna) {
# Verificar se a coluna existe no data frame
if (!coluna %in% colnames(df)) {
stop(paste("Coluna", coluna, "não encontrada no data frame."))
}
# Filtrar os valores que não são -Inf
df_filtrado <- df[!is.infinite(df[[coluna]]), ]
# Retornar o data frame filtrado
return(df_filtrado)
}
tabela_filtrada <- filtrar_inf(tabela, "GPA_log_scaled")
summary(tabela_filtrada$GPA_log_scaled)
View(tabela_filtrada)
rm(tabela_filtrada)
rm(filtrar_inf)
library(dplyr)
tabela_inf <- tabela %>%
filter(is.infinite(GPA_log_scaled))
View(tabela_inf)
View(tabela)
summary(tabela$GPA)
tabela$GPA_log_scaled <- log(tabela$GPA)
View(tabela)
summary(tabela$GPA_log_scaled)
indices_inf <- which(is.infinite(tabela$GPA_log_scaled))
tabela$GPA_log_scaled[indices_inf]
tabela_inf <- tabela %>%
filter(is.infinite(GPA_log_scaled))
print(tabela_inf)
View(tabela_inf)
tabela_zero <- tabela %>%
filter(GPA == 0)
View(tabela_zero)
tabela_um <- tabela %>%
filter(GPA == 1)
View(tabela_um)
rm(tabela_um)
ggplot(tabela_inf, aes(x = GPA_log_scaled_label)) +
geom_histogram(stat = "count", fill = "blue", color = "black") +
labs(title = "Histograma de Valores -Inf em GPA_log_scaled",
x = "Valores -Inf",
y = "Contagem") +
theme_minimal()
ggplot(tabela_zero, aes(x = GPA_log_scaled_label)) +
geom_histogram(stat = "count", fill = "blue", color = "black") +
labs(title = "Histograma de Valores -Inf em GPA_log_scaled",
x = "Valores -Inf",
y = "Contagem") +
theme_minimal()
tabela_filtrada <- tabela %>%
filter(!is.infinite(GPA_log_scaled))
print(tabela_filtrada)
View(tabela_filtrada)
tabela$GPA_log_scaled[indices_inf]
tabela_filtrada$GPA_log_scaled[indices_inf]
rm(tabela_zero)
View(tabela_filtrada)
nova_tabela <- tabela_filtrada %>%
select(-GPA)
View(nova_tabela)
nova_tabela <- tabela_filtrada %>%
select(-StudyTimeWeekly)
View(nova_tabela)
View(tabela_filtrada)
nova_tabela <- tabela_filtrada %>% rename(GPA = GPA_log_scaled)
nova_tabela <- tabela_filtrada %>%
rename(GPA = GPA_log_scaled)
nova_tabela <- nova_tabela %>%
rename(GPA = GPA_log_scaled)
View(nova_tabela)
View(nova_tabela)
View(nova_tabela)
nova_tabela <- tabela_filtrada %>%
select(-GPA)
View(nova_tabela)
nova_tabela <- nova_tabela %>%
rename(GPA = GPA_log_scaled)
View(nova_tabela)
View(nova_tabela)
tabela_refeita <- nova_tabela %>%
select(-StudyTimeWeekly)
View(tabela_refeita)
View(tabela_refeita)
tabela_final <- tabela_refeita %>%
rename(StudyTimeWeekly = StudyTimeWeekly_log_scaled)
View(tabela_final)
ultima_tabela <- tabela_final %>%
select(-StudentID)
View(ultima_tabela)
rm(nova_tabela)
rm(tabela_filtrada)
rm(tabela_final)
rm(tabela_refeita)
View(ultima_tabela)
summarise(ultima_tabela)
View(ultima_tabela)
# Verificar se é um data frame
if (is.data.frame(ultima_tabela)) {
print("É um data frame!")
} else {
print("Não é um data frame.")
}
summary(ultima_tabela)
ultima_tabela$GradeClass <- as.numeric(ultima_tabela$GradeClass)
sum(is.na(ultima_tabela$GradeClass))
# Verificar estatísticas descritivas
summary(ultima_tabela$GradeClass)
summary(ultima_tabela)
summary(ultima_tabela)
cor(ultima_tabela)
library(reshape2)
library(corrplot)
library(corrplot)
corrplot(cor(ultima_tabela), method = "circle"
corrplot(cor(ultima_tabela), method = "circle")
corrplot(cor(ultima_tabela), method = "circle")
pairs(ultima_tabela)
library(GGally)
ggpairs(ultima_tabela)
numeric_tabela <- ultima_tabela[sapply(ultima_tabela, is.numeric)]
print(correlation_matrix)
correlation_matrix <- cor(numeric_tabela)
print(correlation_matrix)
rm(numeric_tabela)
correlation_matrix <- cor(ultima_tabela)
rm(correlation_matrix)
correlation_matrix <- cor(ultima_tabela)
melted_correlation_matrix <- melt(correlation_matrix)
# Criar o heatmap
ggplot(data = melted_correlation_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name="Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
coord_fixed()
ggpairs(melted_correlation_matrix)
corrplot(correlation_matrix, method = "color", tl.col = "black", tl.cex = 0.8)
library(corrplot)
ggplot(data = melted_correlation_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name="Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
coord_fixed()
View(melted_correlation_matrix)
print(correlation_matrix)
ggplot(data = melted_correlation_matrix, aes(x = Var1, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", midpoint = 0, limit = c(-1, 1), name = "Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
coord_fixed()
install.packages(corrplot)
View(correlation_matrix)
print(correlation_matrix)
cor_matrix <- as.matrix(correlation_matrix)
ggplot(data = as.data.frame(cor_matrix), aes(x = Var1, y = Var2, fill = cor_matrix)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), name = "Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
labs(title = "Matriz de Correlação") +
coord_fixed()
image(t(cor_matrix), col = colorRampPalette(c("blue", "white", "red"))(100),
axes = TRUE, main = "Matriz de Correlação", xlab = "Variáveis", ylab = "Variáveis")
rm(list = ls())
ggplot(data = as.data.frame(cor_matrix), aes(x = Var1, y = Var2, fill = cor_matrix)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), name = "Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
labs(title = "Matriz de Correlação") +
coord_fixed()
tabela = read.table("Student_performance_data.csv", sep = ";", dec = ",", header = TRUE)
summary(tabela)
str(tabela)
unique(tabela$StudyTimeWeekly)
tabela$StudyTimeWeekly <- gsub("\\.", "", tabela$StudyTimeWeekly) # Remove os pontos
tabela$StudyTimeWeekly <- as.numeric(tabela$StudyTimeWeekly) # Converte para numérico
summary(tabela$StudyTimeWeekly)
tabela$StudyTimeWeekly_log_scaled <- log(tabela$StudyTimeWeekly)
ggplot(tabela, aes(y = StudyTimeWeekly_log_scaled)) +
geom_boxplot() +
labs(title = "Boxplot de StudyTimeWeekly", y = "StudyTimeWeekly") +
theme(plot.title = element_text(size = 20),  # Tamanho do título
axis.title.y = element_text(size = 15))  # Tamanho do rótulo do e
unique(tabela$GPA)
tabela$GPA <- gsub("\\.", "", tabela$GPA) # Remove os pontos
tabela$GPA <- as.numeric(tabela$GPA) # Converte para numérico
summary(tabela$GPA)
tabela$GPA_log_scaled <- log(tabela$GPA)
ggplot(tabela, aes(y = GPA_log_scaled)) +
geom_boxplot() +
labs(title = "Boxplot de GPA", y = "GPA") +
theme(plot.title = element_text(size = 20),  # Tamanho do título
axis.title.y = element_text(size = 15))  # Tamanho do rótulo do eixo y
+ options(repr.plot.width = 8, repr.plot.height = 6)
summary(tabela$GPA_log_scaled)
indices_inf <- which(is.infinite(tabela$GPA_log_scaled))
tabela$GPA_log_scaled[indices_inf]
tabela_inf <- tabela %>%
filter(is.infinite(GPA_log_scaled))
print(tabela_inf)
tabela_filtrada <- tabela %>%
filter(!is.infinite(GPA_log_scaled))
#removendo a coluna GPA
nova_tabela <- tabela_filtrada %>%
select(-GPA)
View(nova_tabela)
nova_tabela <- tabela_filtrada %>%
select(-StudyTimeWeekly)
View(nova_tabela)
nova_tabela <- nova_tabela %>%
select(-GPA)
View(nova_tabela)
#removendo a coluna StudentID
nova_tabela <- nova_tabela %>%
select(-StudentID)
View(nova_tabela)
View(nova_tabela)
# GradeClass
# Convertendo a coluna GradeClass para formato numérico
ultima_tabela$GradeClass <- as.numeric(ultima_tabela$GradeClass)
# Renomeando variavel GPA_log_scaled
nova_tabela <- nova %>%
rename(GPA_transformado = GPA_log_scaled)
nova_tabela <- nova_tabela %>%
rename(GPA = GPA_log_scaled)
View(nova_tabela)
nova_tabela <- nova_tabela %>%
rename(StudyTimeWeekly = StudyTimeWeekly_log_scaled)
View(nova_tabela)
is.numeric(nova_tabela$StudyTimeWeekly)
is.numeric(nova_tabela$GPA)
View(nova_tabela)
ultima_tabela$GradeClass <- as.numeric(ultima_tabela$GradeClass)
View(nova_tabela)
View(nova_tabela)
nova_tabela$GradeClass <- as.numeric(nova_tabela$GradeClass)
sum(is.na(nova_tabela$GradeClass))
summary(nova_tabela$GradeClass)
cor(nova_tabela)
correlation_matrix <- cor(nova_tabela)
melted_correlation_matrix <- melt(correlation_matrix)
image(t(melted_correlation_matrix), col = colorRampPalette(c("blue", "white", "red"))(100),
axes = TRUE, main = "Matriz de Correlação", xlab = "Variáveis", ylab = "Variáveis")
cor_matrix <- as.matrix(correlation_matrix)
image(t(cor_matrix), col = colorRampPalette(c("blue", "white", "red"))(100),
axes = TRUE, main = "Matriz de Correlação", xlab = "Variáveis", ylab = "Variáveis")
ggplot(data = as.data.frame(cor_matrix), aes(x = Var1, y = Var2, fill = cor_matrix)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), name = "Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
labs(title = "Matriz de Correlação") +
coord_fixed()
melted_cor_matrix <- melt(cor_matrix)
library(ggplot2)
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), name = "Correlação") +
labs(title = "Matriz de Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
coord_fixed()
library(ggplot2)
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), name = "Correlação") +
labs(title = "Matriz de Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, margin = margin(t = 0.6, r = 0, b = 0, l = 0)),
axis.text.y = element_text(margin = margin(t = 0.6, r = 0, b = 0, l = 0))) +
coord_fixed()
library(ggplot2)
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), name = "Correlação") +
labs(title = "Matriz de Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, margin = margin(t = 0.6, r = 0, b = 0, l = 0)),
axis.text.y = element_text(margin = margin(t = 0.6, r = 0, b = 0, l = 0))) +
coord_fixed()
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), name = "Correlação") +
labs(title = "Matriz de Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, margin = margin(t = 0.6, r = 0, b = 0, l = 0)),
axis.text.y = element_text(margin = margin(t = 0.6, r = 0, b = 0, l = 0))) +
coord_fixed()
library(ggplot2)
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), name = "Correlação") +
labs(title = "Matriz de Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, margin = margin(t = 0.6, r = 0, b = 0, l = 0)),
axis.text.y = element_text(margin = margin(t = 0.6, r = 0, b = 0, l = 0))) +
coord_fixed()
View(nova_tabela)
install.packages("corrplot")
library(corrplot)
correlations <- cor(nova_tabela[,1:14])
corrplot(correlations, method="circle")
corrplot(correlations, method="circle", addCoef.col = "grey")
corrplot(correlations, method="circle", addCoef.col = "grey",  number.cex = 0)
corrplot(correlations, method="circle", addCoef.col = "grey",  number.cex = 0)
corrplot(correlations, method="circle", addCoef.col = "grey",  number.cex = 0)
corrplot(correlations, method="circle", addCoef.col = "grey",  cl.cex = 0)
corrplot(correlations, method="circle", addCoef.col = "grey",   number.cex = 0)
corrplot(correlations, method="circle", addCoef.col = "grey",  add = FALSE)
corrplot(correlations, method="circle",  add = FALSE)
pairs(nova_tabela[1:14], pch=21, bg=c("red", "green3", "blue")[nova_tabela$GradeClass])
install.packages("caret")
library(caret)
library(dplyr)
divisao_dados <- nova_tabela %>% select(-GradeClass)
View(divisao_dados)
View(nova_tabela)
rm(divisa)
rm(divisa)
rm(divisao_dados)
set.seed(123)
proporcao_treino <- 0.8
indice_treino <- createDataPartition(nova_tabela$GradeClass, p = proporcao_treino, list = FALSE)
dados_treino <- nova_tabela[indice_treino, ]
dados_teste <- nova_tabela[-indice_treino, ]
install.packages("C50")
install.packages("C50")
library(C50)
train_features <- train_data[, -ncol(data)] # Todas as colunas exceto a última
train_features <- dados_treino[, -ncol(data)] # Todas as colunas exceto a última
View(nova_tabela)
View(nova_tabela)
response_col_index <- which(colnames(nova_tabela) == "GradeClass")
train_target <- dados_treino[, response_col_index] # Variável de resposta
train_features <- dados_treino[, -response_col_index] # Variáveis preditoras
test_target <- dados_teste[, response_col_index] # Variável de resposta
test_features <- dados_teste[, -response_col_index] # Variáveis preditoras
c50_model <- C5.0(train_features, train_target)
train_target <- factor(dados_treino[, response_col_index])
test_target <- factor(dados_teste[, response_col_index])
c50_model <- C5.0(train_features, train_target)
predictions <- predict(c50_model, test_features)
confusion_matrix <- table(predictions, test_target)
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Acurácia:", accuracy))
print(paste("Acurácia:", accuracy * 100))
train_x <- dados_treino[, -response_col_index]  # Todas as colunas exceto GradeClass
train_y <- dados_treino$GradeClass
test_x <- dados_teste[, -response_col_index]
test_y <- dados_teste$GradeClass
k <- 10
predict_knn <- knn(train = train_x, test = test_x, cl = train_y, k = k)
library(class)
predict_knn <- knn(train = train_x, test = test_x, cl = train_y, k = k)
confusion_matrix <- table(Predicted = predict_knn, Actual = test_y)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(confusion_matrix)
print(paste("Acurácia:", round(accuracy, 2)))
print(paste("Acurácia:", accuracy * 100))
confusion_matrix_knn <- table(Predicted = predict_knn, Actual = test_y)
accuracy_knn <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(confusion_matrix_knn)
print(paste("Acurácia:", accuracy_knn * 100))
install.packages("e1071")
library(class)# pacote para modelo KNN
library(e1071)
model <- naiveBayes(target ~ ., data = dados_treino)
model <- naiveBayes(GradeClass ~ ., data = dados_treino)
predictions_bayes <- predict(model, dados_teste)
confusion_matrix_bayes <- table(dados_teste$GradeClass, predictions_baye)
confusion_matrix_bayes <- table(dados_teste$GradeClass, predictions_bayes)
print(confusion_matrix_bayes)
accuracy_bayes <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
accuracy_knn <- sum(diag(confusion_matrix_knn)) / sum(confusion_matrix_knn)
print(confusion_matrix_knn)
print(paste("Acurácia:", accuracy_knn * 100))
accuracy_bayes <- sum(diag(confusion_matrix_bayes)) / sum(confusion_matrix_bayes)
print(confusion_matrix_bayes)
print(paste("Acurácia:", accuracy_bayes * 100))
install.packages("kernlab")
install.packages("mlbench")
library(kernlab)
library(mlbench) # pacote para modelo  SVM
svm_model <- ksvm(GradeClass ~ ., data = dados_treino, kernel = "rbfdot")
predictions_svm <- predict(svm_model, dados_teste, type = "response")
confusion_matrix_svm <- table(Predicted = predictions_svm, Actual = dados_teste$GradeClass)
accuracy_svm <- sum(diag(confusion_matrix_svm)) / sum(confusion_matrix_svm)
print(confusion_matrix_svm)
print(paste("Acurácia:", accuracy_svm * 100))
print(paste("Acurácia:", accuracy_svm * 100))
